{% extends "layout.njk" %}

{% block head %}
  <title>Nossos Professores</title>
{% endblock %}

{% block content %}
  <div class="card table-container">
    <div class="header-table">
      <a class="button" href="/teachers/create">Novo</a>
      <form action="/teachers" method="GET">
        <input type="text" name="filter" placeholder="Nome ou Áreas de atuação" value="{{ filter }}">
        <button type="submit">Filtrar</button>
      </form>
    </div>
    <table>
      <thead>
        <tr>
          <th>Professor(a)</th>
          <th class="viewOptional">Áreas de atuação</th>
          <th class="viewOptional">Nº de Alunos</th>
          <th>Ação</th>
        </tr>
      </thead>
      <tbody>
        {% for teacher in teachers %}
          <tr>
            <td>
              <span style="background-image: url({{ teacher.avatar_url }})"></span>
              {{ teacher.name }}
            </td>
            <td class="viewOptional">
              {% for subjects_taught in teacher
                .subjects_taught
                .split(",") %}
                <span>{{ subjects_taught }}</span>
              {% endfor %}
            </td>
            <td class="viewOptional">
              {{ teacher.total_students }}
            </td>
            <td>
              <a href="/teachers/{{ teacher.id }}">Detalhes</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
      <div class="pagination"
        data-page={{pagination.page}}
        data-total={{pagination.total}}
        data-filter={{filter}}
      ></div>
  </div>

  <script>

    function paginate(selectedPage, totalPages) {
      let pages = [],
        oldPage;

      for (let currentPage = 1; currentPage <= totalPages; currentPage++) {

        const firstAndLastPage = currentPage == 1 || currentPage == totalPages;
        const pagesAfterSelectedPage = currentPage <= selectedPage + 2;
        const pagesBeforeSelectedPage = currentPage >= selectedPage - 2;

        if (firstAndLastPage || pagesBeforeSelectedPage && pagesAfterSelectedPage) {
          if (oldPage && currentPage - oldPage > 2) {
            pages.push("...")
          }

          if (oldPage && currentPage - oldPage == 2) {
            pages.push(oldPage + 1)
          }

          pages.push(currentPage);

          oldPage = currentPage;
        }
      }
      return pages;
    }

    function createPagination(pagination) {
      const filter = pagination.dataset.filter;
      const page = Number(pagination.dataset.page);
      const total = Number(pagination.dataset.total);
      const pages = paginate(page, total);

      let elements = "";

      for (let page of pages) {
        if(String(page).includes("...")) {
          elements += `<span>${page}</span>`
        } else {

            if(filter) {
              elements += `<a href="?page=${page}&filter={{filter}}">${page}</a>`
            } else {
              elements += `<a href="?page=${page}">${page}</a>`
            }
          } 
      }
      pagination.innerHTML = elements;
    }

    const pagination = document.querySelector('.pagination')

    if(pagination) {
      createPagination(pagination);
    }
  </script>
{% endblock %}